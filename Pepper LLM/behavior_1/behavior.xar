<?xml version="1.0" encoding="UTF-8"?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd"
    xar_version="3">
    <Box name="root" id="-1" localization="8"
        tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content><![CDATA[]]></content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1"
            tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0"
            tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0"
            tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0"
            tooltip="Signal sent when box behavior is finished." id="4" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram scale="84.0896">
                        <Box name="Brain" id="1" localization="8" tooltip="" x="221" y="69">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content><![CDATA[import urllib2
import json

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.text = ""
        self.newCall = True


    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        if (self.newCall):
            #response = self.rasa_call(self.url, '/restart') #TODO: Rasa can be restarted
            self.logger.info("Le message est: %s",self.text)
            self.onSay(self.text)
            self.newCall = False
        self.onStopped()

    def onInput_ServerToRobotSentence(self, text=None):
        self.text = text
        if (self.text):
            if (self.text.startswith('No_speech')):
                self.onSay("") # Dans le cas ou pas de parole n'a été capté
            elif (self.text.startswith('Au revoir')):
                self.onBye(self.text)
            else:
                self.onSay(self.text)
        else:
            self.onSay("UwU ?")
        self.onStopped()

    def onInput_ServerToRobotAction(self, text=None):
        self.text = text
        if (self.text):
            if (self.text.startswith('No_more_speech')):
                self.onBye("") # Fin
            elif (self.text.startswith('Do_dab')):
                self.onDab() # Fait un dab
            elif (self.text.startswith('show_')):
                self.OnPlan(self.text.replace("show_",""))
        else:
            self.onSay("UwU ?")

        self.onStopped()


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped]]></content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1"
                                tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0"
                                tooltip="Box behavior starts when a signal is received on this input."
                                id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0"
                                tooltip="Box behavior stops when a signal is received on this input."
                                id="3" />
                            <Input name="ServerToRobotSentence" type="3" type_size="1" nature="1"
                                inner="0" tooltip="Output of the SR + LLM server" id="4" />
                            <Input name="ServerToRobotAction" type="3" type_size="1" nature="1"
                                inner="0" tooltip="" id="5" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0"
                                tooltip="Signal sent when box behavior is finished." id="6" />
                            <Output name="onBye" type="3" type_size="1" nature="2" inner="0"
                                tooltip="" id="7" />
                            <Output name="onSay" type="3" type_size="1" nature="2" inner="0"
                                tooltip="" id="8" />
                            <Output name="onDab" type="1" type_size="1" nature="2" inner="0"
                                tooltip="" id="9" />
                            <Output name="OnPlan" type="3" type_size="1" nature="2" inner="0"
                                tooltip="" id="10" />
                        </Box>
                        <Box name="Record Sound" id="8" localization="8"
                            tooltip='Record a sound on the robot. You can choose to record only with one&#x0A;microphone (the front head microphone) in ogg format, or with four microphones&#x0A;(front, sides and rear head microphones) in wav format.&#x0A;&#x0A;If &quot;Temporary storage&quot; isn&apos;t checked, the output sound file is located in &quot;~/recordings/microphones/&lt;File name&gt;&quot;.&#x0A;Else, it is located in a temporary directory&#x0A;&#x0A;The onStopped output is stimulated at the end of the recording and contains the absolute path to the output sound file&#x0A;&#x0A;V1.1.0&#x0A;'
                            x="337" y="478">
                            <bitmap>media/images/box/interaction/rec_sound.png</bitmap>
                            <script language="4">
                                <content><![CDATA[]]></content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1"
                                tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0"
                                tooltip="Launches the recording of the sound." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0"
                                tooltip="Stops the recording of the sound." id="3" />
                            <Output name="onStopped" type="3" type_size="1" nature="1" inner="0"
                                tooltip="Returns the absolute path of the output sound file at the end of the recording"
                                id="4" />
                            <Parameter name="File name" inherits_from_parent="0" content_type="3"
                                value="recording" default_value="recording" custom_choice="0"
                                tooltip="Name of the destination file without its extension." id="5" />
                            <Parameter name="Microphones used" inherits_from_parent="0"
                                content_type="3" value="Front head microphone only (.ogg)"
                                default_value="Front, sides and rear head microphones (.wav)"
                                custom_choice="0"
                                tooltip="Microphones used to record the sound.&#x0A;&#x0A;Note: If you use only the front head microphone the file will be saved in ogg format. If you use the&#x0A;front, sides and rear head microphones it will be saved in wav format."
                                id="6">
                                <Choice value="Front head microphone only (.ogg)" />
                                <Choice value="Front, sides and rear head microphones (.wav)" />
                            </Parameter>
                            <Parameter name="Temporary storage" inherits_from_parent="0"
                                content_type="0" value="1" default_value="1"
                                tooltip="Choose if the file should be stored as a temporary file so it is removed as soon&#x0A;as the behavior is unloaded.&#x0A;&#x0A;When this option is disabled the file is stored in ~/recordings/microphones. You can&#x0A;then get it on your computer using the menu Connection/File transfer.&#x0A;&#x0A;When this option is enabled the file is stored in the temporary folder of the behavior."
                                id="7" />
                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2"
                                value="8" default_value="5" min="0.1" max="60"
                                tooltip="Duration of the recording in seconds." id="8" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Rec. Sound File" id="4" localization="8"
                                                tooltip="Record a sound on the robot. You can choose to record only with one&#x0A;microphone (the front head microphone) in ogg format, or with four microphones&#x0A;(front, sides and rear head&#x0A;microphones) in wav format."
                                                x="562" y="100">
                                                <bitmap>media/images/box/interaction/rec_sound.png</bitmap>
                                                <script language="4">
                                                    <content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        try:
            self.ad = ALProxy("ALAudioDevice")
        except Exception as e:
            self.ad = None
            self.logger.error(e)
        self.filepath = ""

    def onLoad(self):
        self.bIsRecording = False
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False
        if( self.bIsRecording ):
            self.ad.stopMicrophonesRecording()
            self.bIsRecording = False

    def onInput_onStart(self, p):
        if(self.bIsRunning):
            return
        self.bIsRunning = True
        sExtension = self.toExtension( self.getParameter("Microphones used") )
        self.filepath = p + sExtension
        if self.ad:
            self.ad.startMicrophonesRecording( self.filepath )
            self.bIsRecording = True
        else:
            self.logger.warning("No sound recorded")

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped(self.filepath)

    def toExtension(self, sMicrophones):
        if( sMicrophones == "Front head microphone only (.ogg)" ):
            return ".ogg"
        else:
            return ".wav"]]></content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1"
                                                    nature="0" inner="1"
                                                    tooltip="Signal sent when diagram is loaded."
                                                    id="1" />
                                                <Input name="onStart" type="3" type_size="1"
                                                    nature="2" inner="0"
                                                    tooltip="Launches the recording of the sound. The data received on this input must be the&#x0A;filename of the sound."
                                                    id="2" />
                                                <Input name="onStop" type="1" type_size="1"
                                                    nature="3" inner="0"
                                                    tooltip="Stops the recording of the sound."
                                                    id="3" />
                                                <Output name="onStopped" type="3" type_size="1"
                                                    nature="1" inner="0"
                                                    tooltip="Returns the absolute path of the output sound file at the end of the recording"
                                                    id="4" />
                                                <Parameter name="Microphones used"
                                                    inherits_from_parent="0" content_type="3"
                                                    value="Front head microphone only (.ogg)"
                                                    default_value="Front, sides and rear head microphones (.wav)"
                                                    custom_choice="0"
                                                    tooltip="Microphones used to record the sound.&#x0A;&#x0A;Note: If you use only the front head microphone the file will be saved in ogg format. If you use the&#x0A;front, sides and rear head microphones it will be saved in wav format."
                                                    id="5">
                                                    <Choice
                                                        value="Front head microphone only (.ogg)" />
                                                    <Choice
                                                        value="Front, sides and rear head microphones (.wav)" />
                                                </Parameter>
                                            </Box>
                                            <Box name="Wait" id="13" localization="8"
                                                tooltip="Wait a moment before sending a bang on the output. The wait can be stopped any&#x0A;time. You may restart it any time, and it will start over."
                                                x="420" y="161">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]></content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1"
                                                    nature="0" inner="1"
                                                    tooltip="Signal sent when diagram is loaded."
                                                    id="1" />
                                                <Input name="onStart" type="1" type_size="1"
                                                    nature="2" inner="0"
                                                    tooltip="Start the Wait box with the configured timeout value."
                                                    id="2" />
                                                <Input name="onStop" type="1" type_size="1"
                                                    nature="3" inner="0"
                                                    tooltip="Stop the wait and stimulate the output."
                                                    id="3" />
                                                <Output name="timerOutput" type="1" type_size="1"
                                                    nature="1" inner="0"
                                                    tooltip="Send a bang once time set in parameters is ellapsed, or if the box is stopped."
                                                    id="4" />
                                                <Parameter name="Timeout (s)"
                                                    inherits_from_parent="1" content_type="2"
                                                    value="5" default_value="1" min="0" max="5000"
                                                    tooltip="Duration the box waits before stimulating the output."
                                                    id="5" />
                                            </Box>
                                            <Box name="Get File Name" id="10" localization="8"
                                                tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated."
                                                x="234" y="95">
                                                <bitmap>media/images/box/folder.png</bitmap>
                                                <script language="4">
                                                    <content><![CDATA[import os
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.framemanager = ALProxy("ALFrameManager")

    def onInput_onStart(self):
        if( self.getParameter("Temporary storage") ):
            import tempfile
            path = tempfile.mkdtemp() + "/"
        else:
            path = os.path.expanduser('~') + "/recordings/microphones/"
        self.onStopped( path + self.getParameter("File name") )]]></content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1"
                                                    nature="0" inner="1"
                                                    tooltip="Signal sent when diagram is loaded."
                                                    id="1" />
                                                <Input name="onStart" type="1" type_size="1"
                                                    nature="1" inner="0"
                                                    tooltip="To send the filepath on the output."
                                                    id="2" />
                                                <Output name="onStopped" type="3" type_size="1"
                                                    nature="2" inner="0"
                                                    tooltip="The filepath of the selected resource file."
                                                    id="3" />
                                                <Parameter name="File name" inherits_from_parent="0"
                                                    content_type="3" value="recording"
                                                    default_value="" custom_choice="0"
                                                    tooltip="Name of the file." id="4" />
                                                <Parameter name="Temporary storage"
                                                    inherits_from_parent="0" content_type="0"
                                                    value="0" default_value="0"
                                                    tooltip="Choose if the file should be stored as a temporary file so it is removed as soon&#x0A;as the behavior is unloaded.&#x0A;&#x0A;When this option is enabled the file is stored in ~/.cache/currentChoregrapheBehavior&#x0A;or in ~/.cache/&lt;project_name&gt; when you play the behavior from the&#x0A;behavior manager.&#x0A;&#x0A;When it is disabled the file is stored in ~/recordedSounds. You can&#x0A;then get it on your computer using the menu Connection/File transfer."
                                                    id="5" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="4" outputowner="4"
                                                indexofoutput="4" />
                                            <Link inputowner="4" indexofinput="3" outputowner="13"
                                                indexofoutput="4" />
                                            <Link inputowner="10" indexofinput="2" outputowner="0"
                                                indexofoutput="2" />
                                            <Link inputowner="13" indexofinput="2" outputowner="10"
                                                indexofoutput="3" />
                                            <Link inputowner="4" indexofinput="2" outputowner="10"
                                                indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Audio recorder" type="Lock" timeout="0" />
                        </Box>
                        <Box name="AskServer" id="7" localization="8"
                            tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it."
                            x="562" y="482">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content><![CDATA[import urllib2
import json
import time
import base64
import wave

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        # serveur : Server SR + LLM.py
        self.url = 'http://10.126.7.176:5000/google?'

    def onLoad(self):
        pass

    def onUnload(self):
       pass

    def onInput_onStart(self, path):
        file = wave.open(path, 'rb')
        params = base64.b64encode(str(file.getparams()))
        data = base64.b64encode(file.readframes(file.getnframes()))

        response = self.pydial_call(self.url, data, params)

        # Phrase
        sentence = json.loads(response.body)['sentence']
        if sentence == None:
            sentence = "Error Null sentence"
        self.onStoppedSentence(u''.join(sentence).encode('utf-8'))

        # Action
        action = json.loads(response.body)['action']
        if action == None:
            action = "Error Null action"
        self.onStoppedAction(u''.join(action).encode('utf-8'))


    def onInput_onStop(self):
        self.onUnload()

    def pydial_call(self, url, speech_data, params):
        data = '{"result":{"resultType":"Partial", "alts":[{"transcript":"useless", "confidence":1}]}'
        data += ',"data":"'+speech_data+'", "params":"'+params+'"}'

        req = urllib2.Request(url, data=data)
        f = urllib2.urlopen(req)
        class Response:
            pass
        response = Response()
        response.code = f.getcode() #200
        response.body = f.read()
        return response]]></content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1"
                                tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0"
                                tooltip="Box behavior starts when a signal is received on this input."
                                id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0"
                                tooltip="Box behavior stops when a signal is received on this input."
                                id="3" />
                            <Output name="onStoppedSentence" type="3" type_size="1" nature="1"
                                inner="0" tooltip="Signal sent when box behavior is finished."
                                id="4" />
                            <Output name="onStoppedAction" type="3" type_size="1" nature="1"
                                inner="0" tooltip="" id="5" />
                        </Box>
                        <Box name="SayBye" id="2" localization="8"
                            tooltip="Say the text received on its input." x="604" y="7">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1"
                                tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0"
                                tooltip="Box behavior starts when a signal is received on this Input."
                                id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0"
                                tooltip="Box behavior stops when a signal is received on this Input."
                                id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0"
                                tooltip="Signal sent when Box behavior is finished." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="1"
                                content_type="1" value="100" default_value="100" min="50" max="150"
                                tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.'
                                id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1"
                                value="100" default_value="100" min="50" max="200"
                                tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed."
                                id="6" />
                        </Box>
                        <Box name="Animated Say" id="3" localization="8"
                            tooltip="Say some text with animations. The text can be localized."
                            x="122" y="483">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALAnimatedSpeech')
        self.ttsStop = ALProxy('ALAnimatedSpeech', True)

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while self.bIsRunning:
            time.sleep(0.2)

    def onInput_onStart(self, p):
        self.bIsRunning = True
        id = None
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")

            if movement != "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)

            sentence = "\\RSPD=" + str(self.getParameter("Speed (%)")) + "\\ "
            sentence += "\\VCT=" + str(self.getParameter("Voice shaping (%)")) + "\\ "
            sentence += str(p)
            sentence += "\\RST\\ "

            id = self.tts.post.say(str(sentence), {"speakingMovementMode": movement})
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            if id is not None:
                try:
                    self.ids.remove(id)
                except:
                    pass

            if not self.ids:
                self.onStopped()
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1"
                                tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0"
                                tooltip="Box behavior starts when a signal is received on this Input."
                                id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0"
                                tooltip="Box behavior stops when a signal is received on this Input."
                                id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0"
                                tooltip="Signal sent when Box behavior is finished." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="1"
                                content_type="1" value="100" default_value="100" min="50" max="150"
                                tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.'
                                id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1"
                                value="100" default_value="100" min="50" max="200"
                                tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed."
                                id="6" />
                            <Parameter name="Text" inherits_from_parent="0" content_type="5"
                                value="Hello" default_value=""
                                tooltip="The text you want to say. Don&apos;t forget to translate it!"
                                id="7" />
                            <Parameter name="Speaking movement mode" inherits_from_parent="0"
                                content_type="3" value="contextual" default_value="contextual"
                                custom_choice="0"
                                tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation."
                                id="8">
                                <Choice value="disabled" />
                                <Choice value="random" />
                                <Choice value="contextual" />
                            </Parameter>
                            <Parameter name="Animation" inherits_from_parent="0" content_type="3"
                                value="Stand/Gestures/Hey_2" default_value="" custom_choice="0"
                                tooltip="The animation to play" id="9" />
                        </Box>
                        <Box name="Show HTML" id="13" localization="8"
                            tooltip="display an image on the screen&#x0A;&#x0A;V1.0.0&#x0A;" x="234"
                            y="618">
                            <bitmap>media/images/box/interaction/rec_movie.png</bitmap>
                            <script language="4">
                                <content><![CDATA[class MyClass(GeneratedClass):
    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def _getAbsoluteUrl(self, partial_url):
        import os
        subPath = os.path.join(self.packageUid(), os.path.normpath(partial_url).lstrip("\\/"))
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        return "http://%s/apps/%s" % (self._getTabletService().robotIp(), subPath.replace(os.path.sep, "/"))

    def onInput_onStart(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                # Get the HTML file path from a parameter
                html_file = self.getParameter("HTMLFile")
                if html_file == '':
                    self.logger.error("Path to HTML file is empty")
                    return

                # Convert to absolute URL if it's not a full http URL
                if not html_file.startswith('http'):
                    html_file = self._getAbsoluteUrl(html_file)

                # Show the HTML file on the tablet
                tabletService.showWebview(html_file)

            except Exception as err:
                self.logger.error("Error during ShowWebview: %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't display the HTML file.")
            self.onStopped()

    def onInput_onHideWebview(self):
        # Hide the webview
        tabletService = self._getTabletService()
        if tabletService:
            try:
                tabletService.hideWebview()
            except Exception as err:
                self.logger.error("Error during HideWebview: %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't hide the webview.")
            self.onStopped()

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]></content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1"
                                tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0"
                                tooltip="Box behavior starts when a signal is received on this input."
                                id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0"
                                tooltip="Box behavior stops when a signal is received on this input."
                                id="3" />
                            <Input name="onHideImage" type="1" type_size="1" nature="1" inner="0"
                                tooltip="Hide the image when a signal is received on this input."
                                id="4" />
                            <Input name="onPreLoadImage" type="1" type_size="1" nature="1" inner="0"
                                tooltip="Preload the image when a signal is received on this input."
                                id="5" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0"
                                tooltip="Signal sent when box behavior is finished." id="6" />
                            <Parameter name="HTMLFile" inherits_from_parent="0" content_type="3"
                                value="circle_on_old.html" default_value="" custom_choice="0"
                                tooltip='path of the HTML inside the &quot;html&quot; folder (e.g. &quot;myhtml.html&quot;'
                                id="7" />
                        </Box>
                        <Box name="Show HTML (1)" id="4" localization="8"
                            tooltip="display an image on the screen&#x0A;&#x0A;V1.0.0&#x0A;" x="490"
                            y="617">
                            <bitmap>media/images/box/interaction/rec_movie.png</bitmap>
                            <script language="4">
                                <content><![CDATA[class MyClass(GeneratedClass):
    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def _getAbsoluteUrl(self, partial_url):
        import os
        subPath = os.path.join(self.packageUid(), os.path.normpath(partial_url).lstrip("\\/"))
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        return "http://%s/apps/%s" % (self._getTabletService().robotIp(), subPath.replace(os.path.sep, "/"))

    def onInput_onStart(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                # Get the HTML file path from a parameter
                html_file = self.getParameter("HTMLFile")
                if html_file == '':
                    self.logger.error("Path to HTML file is empty")
                    return

                # Convert to absolute URL if it's not a full http URL
                if not html_file.startswith('http'):
                    html_file = self._getAbsoluteUrl(html_file)

                # Show the HTML file on the tablet
                tabletService.showWebview(html_file)

            except Exception as err:
                self.logger.error("Error during ShowWebview: %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't display the HTML file.")
            self.onStopped()

    def onInput_onHideWebview(self):
        # Hide the webview
        tabletService = self._getTabletService()
        if tabletService:
            try:
                tabletService.hideWebview()
            except Exception as err:
                self.logger.error("Error during HideWebview: %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't hide the webview.")
            self.onStopped()

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]></content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1"
                                tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0"
                                tooltip="Box behavior starts when a signal is received on this input."
                                id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0"
                                tooltip="Box behavior stops when a signal is received on this input."
                                id="3" />
                            <Input name="onHideImage" type="1" type_size="1" nature="1" inner="0"
                                tooltip="Hide the image when a signal is received on this input."
                                id="4" />
                            <Input name="onPreLoadImage" type="1" type_size="1" nature="1" inner="0"
                                tooltip="Preload the image when a signal is received on this input."
                                id="5" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0"
                                tooltip="Signal sent when box behavior is finished." id="6" />
                            <Parameter name="HTMLFile" inherits_from_parent="0" content_type="3"
                                value="circle_off_old.html" default_value="" custom_choice="0"
                                tooltip='path of the HTML inside the &quot;html&quot; folder (e.g. &quot;myhtml.html&quot;'
                                id="7" />
                        </Box>
                        <Box name="Dab Timeline" id="5" localization="8" tooltip="Timeline du dab"
                            x="605" y="128">
                            <bitmap>media/images/box/movement/move.png</bitmap>
                            <script language="4">
                                <content><![CDATA[]]></content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1"
                                tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0"
                                tooltip="Box behavior starts when a signal is received on this input."
                                id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0"
                                tooltip="Box behavior stops when a signal is received on this input."
                                id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0"
                                tooltip="Signal sent when box behavior is finished." id="4" />
                            <Output name="output" type="3" type_size="1" nature="2" inner="0"
                                tooltip="" id="5" />
                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="114">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram />
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <ActuatorList model="juliette">
                                    <ActuatorCurve name="value" actuator="HeadPitch" mute="0"
                                        unit="0">
                                        <Key frame="10" value="0.129713" />
                                        <Key frame="30" value="24.9962" />
                                        <Key frame="49" value="25.3566" />
                                        <Key frame="99" value="24.9962" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="11" value="0.629938" />
                                        <Key frame="32" value="40.6326" />
                                        <Key frame="100" value="41.3534" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowRoll" mute="0"
                                        unit="0">
                                        <Key frame="1" value="-9.92076" />
                                        <Key frame="26" value="-8.61328" />
                                        <Key frame="60" value="-46.4046" />
                                        <Key frame="99" value="-90.7123" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowYaw" mute="0"
                                        unit="0">
                                        <Key frame="1" value="-90.1239" />
                                        <Key frame="40" value="-90.6085" />
                                        <Key frame="57" value="-63.2905" />
                                        <Key frame="77" value="-36.8097" />
                                        <Key frame="100" value="-29.6696" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                        <Key frame="1" value="0.874968" />
                                        <Key frame="23" value="25.8927" />
                                        <Key frame="61" value="64.7751" />
                                        <Key frame="99" value="100.27" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0"
                                        unit="0">
                                        <Key frame="19" value="90.3181" />
                                        <Key frame="100" value="0.174947" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0"
                                        unit="0">
                                        <Key frame="1" value="-0.297994" />
                                        <Key frame="13" value="-0.638671" />
                                        <Key frame="25" value="20.2697" />
                                        <Key frame="38" value="20.2697" />
                                        <Key frame="50" value="19.6718" />
                                        <Key frame="63" value="19.8389" />
                                        <Key frame="75" value="19.3289" />
                                        <Key frame="88" value="19.3289" />
                                        <Key frame="100" value="20.3489" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LWristYaw" mute="0"
                                        unit="0">
                                        <Key frame="13" value="-17.6686" />
                                        <Key frame="26" value="-12.9225" />
                                        <Key frame="38" value="-11.8678" />
                                        <Key frame="51" value="-8.61579" />
                                        <Key frame="63" value="-6.5064" />
                                        <Key frame="76" value="-6.5064" />
                                        <Key frame="88" value="-6.5064" />
                                        <Key frame="101" value="-6.5064" />
                                        <Key frame="113" value="-6.5064" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowRoll" mute="0"
                                        unit="0">
                                        <Key frame="13" value="10.8984" />
                                        <Key frame="26" value="10.8106" />
                                        <Key frame="38" value="10.6348" />
                                        <Key frame="51" value="10.5469" />
                                        <Key frame="63" value="10.3711" />
                                        <Key frame="76" value="10.3711" />
                                        <Key frame="88" value="10.3711" />
                                        <Key frame="101" value="10.3711" />
                                        <Key frame="113" value="10.3711" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowYaw" mute="0"
                                        unit="0">
                                        <Key frame="13" value="77.959" />
                                        <Key frame="26" value="73.3008" />
                                        <Key frame="38" value="71.6309" />
                                        <Key frame="51" value="68.2031" />
                                        <Key frame="113" value="112.769" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                        <Key frame="13" value="0.43058" />
                                        <Key frame="42" value="40.4698" />
                                        <Key frame="76" value="74.326" />
                                        <Key frame="114" value="99.3287" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0"
                                        unit="0">
                                        <Key frame="13" value="92.2852" />
                                        <Key frame="26" value="92.9883" />
                                        <Key frame="38" value="93.3399" />
                                        <Key frame="51" value="93.7793" />
                                        <Key frame="63" value="94.2188" />
                                        <Key frame="76" value="94.2188" />
                                        <Key frame="88" value="94.2188" />
                                        <Key frame="101" value="94.2188" />
                                        <Key frame="113" value="94.2188" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0"
                                        unit="0">
                                        <Key frame="1" value="-0.871254" />
                                        <Key frame="26" value="-6.32813" />
                                        <Key frame="67" value="-46.9496" />
                                        <Key frame="100" value="-101.414" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RWristYaw" mute="0"
                                        unit="0">
                                        <Key frame="13" value="18.5427" />
                                        <Key frame="26" value="17.2244" />
                                        <Key frame="38" value="17.2244" />
                                        <Key frame="51" value="15.8181" />
                                        <Key frame="63" value="14.7634" />
                                        <Key frame="76" value="14.7634" />
                                        <Key frame="88" value="14.7634" />
                                        <Key frame="101" value="14.7634" />
                                        <Key frame="113" value="14.7634" />
                                    </ActuatorCurve>
                                </ActuatorList>
                            </Timeline>
                        </Box>
                        <Box name="Show HTML (2)" id="6" localization="8"
                            tooltip="display an image on the screen&#x0A;&#x0A;V1.0.0&#x0A;" x="606"
                            y="239">
                            <bitmap>media/images/box/interaction/rec_movie.png</bitmap>
                            <script language="4">
                                <content><![CDATA[class MyClass(GeneratedClass):
    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def _getAbsoluteUrl(self, partial_url):
        import os
        subPath = os.path.join(self.packageUid(), os.path.normpath(partial_url).lstrip("\\/"))
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        return "http://%s/apps/%s" % (self._getTabletService().robotIp(), subPath.replace(os.path.sep, "/"))

    def onInput_onStart(self, html_file=None):
        self.html_file = html_file
        print(html_file)
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                # Get the HTML file path from a parameter
                #html_file = self.getParameter("HTMLFile")
                if html_file == '':
                    self.logger.error("Path to HTML file is empty")
                    return

                # Convert to absolute URL if it's not a full http URL
                if not html_file.startswith('http'):
                    html_file = self._getAbsoluteUrl(html_file)

                print("just before :",html_file)
                # Show the HTML file on the tablet
                tabletService.showWebview(html_file)

            except Exception as err:
                self.logger.error("Error during ShowWebview: %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't display the HTML file.")
            self.onStopped()

    def onInput_onHideWebview(self):
        # Hide the webview
        tabletService = self._getTabletService()
        if tabletService:
            try:
                tabletService.hideWebview()
            except Exception as err:
                self.logger.error("Error during HideWebview: %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't hide the webview.")
            self.onStopped()

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]></content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1"
                                tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0"
                                tooltip="Box behavior starts when a signal is received on this input."
                                id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0"
                                tooltip="Box behavior stops when a signal is received on this input."
                                id="3" />
                            <Input name="onHideImage" type="1" type_size="1" nature="1" inner="0"
                                tooltip="Hide the image when a signal is received on this input."
                                id="4" />
                            <Input name="onPreLoadImage" type="1" type_size="1" nature="1" inner="0"
                                tooltip="Preload the image when a signal is received on this input."
                                id="5" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0"
                                tooltip="Signal sent when box behavior is finished." id="6" />
                            <Parameter name="HTMLFile" inherits_from_parent="0" content_type="3"
                                value="" default_value="" custom_choice="0"
                                tooltip='path of the HTML inside the &quot;html&quot; folder (e.g. &quot;myhtml.html&quot;'
                                id="7" />
                        </Box>
                        <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="1" indexofinput="4" outputowner="7" indexofoutput="4" />
                        <Link inputowner="7" indexofinput="2" outputowner="8" indexofoutput="4" />
                        <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="7" />
                        <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="8" />
                        <Link inputowner="13" indexofinput="2" outputowner="3" indexofoutput="4" />
                        <Link inputowner="8" indexofinput="2" outputowner="3" indexofoutput="4" />
                        <Link inputowner="4" indexofinput="2" outputowner="8" indexofoutput="4" />
                        <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                        <Link inputowner="5" indexofinput="2" outputowner="1" indexofoutput="9" />
                        <Link inputowner="8" indexofinput="2" outputowner="5" indexofoutput="4" />
                        <Link inputowner="1" indexofinput="5" outputowner="7" indexofoutput="5" />
                        <Link inputowner="6" indexofinput="2" outputowner="1" indexofoutput="10" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>